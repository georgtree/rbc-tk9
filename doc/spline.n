.TH Spline
.RS
.IP \(bu 2
Name \[la]#name\[ra]
.IP \(bu 2
Synopsis \[la]#synopsis\[ra]
.IP \(bu 2
Description \[la]#description\[ra]
.IP \(bu 2
Introduction \[la]#introduction\[ra]
.IP \(bu 2
Example \[la]#example\[ra]
.IP \(bu 2
Operations \[la]#operations\[ra]
.IP \(bu 2
References \[la]#references\[ra]
.RE
.SH Name
.PP
spline âˆ’ Fit curves with spline interpolation
.SH Synopsis
.PP
\fBspline natural\fP \fIx y sx sy\fP
.PP
\fBspline quadratic\fP \fIx y sx sy\fP
.SH Description
.PP
The \fBspline\fP command computes a spline fitting a set of data points (x and y vectors) and produces a vector of the
interpolated images (y\-coordinates) at a given set of x\-coordinates.
.SH Introduction
.PP
Curve fitting has many applications. In graphs, curve fitting can be useful for displaying curves which are
aesthetically pleasing to the eye. Another advantage is that you can quickly generate arbitrary points on the curve from
a small set of data points.
.PP
A spline is a device used in drafting to produce smoothed curves. The points of the curve, known as \fIknots\fP, are fixed
and the \fIspline\fP, typically a thin strip of wood or metal, is bent around the knots to create the smoothed curve. Spline
interpolation is the mathematical equivalent. The curves between adjacent knots are piecewise functions such that the
resulting spline runs exactly through all the knots. The order and coefficients of the polynominal determine the
"looseness" or "tightness" of the curve fit from the line segments formed by the knots.
.PP
The \fBspline\fP command performs spline interpolation using cubic ("natural") or quadratic polynomial functions. It
computes the spline based upon the knots, which are given as x and y vectors. The interpolated new points are determined
by another vector which represents the abscissas (x\-coordinates) or the new points. The ordinates (y\-coordinates) are
interpolated using the spline and written to another vector.
.SH Example
.PP
Before we can use the \fBspline\fP command, we need to create two RBC vectors which will represent the knots (x and y
coordinates) of the data that we're going to fit. Obviously, both vectors must be the same length.
.PP
.RS
.nf
# Create sample data of ten points.
vector x(10) y(10)

for {set i 10} {$i > 0} {incr i \-1} {
    set x($i\-1) [expr $i*$i]
    set y($i\-1) [expr sin($i*$i*$i)]
}
.fi
.RE
.PP
We now have two vectors \fB\fCx\fR and \fB\fCy\fR representing the ten data points we're trying to fit. The order of the values of \fB\fCx\fR
must be monotonically increasing. We can use the vector's \fBsort\fP operation to sort the vectors.
.PP
.RS
.nf
x sort y
.fi
.RE
.PP
The components of \fB\fCx\fR are sorted in increasing order. The components of \fB\fCy\fR are rearranged so that the original x,y
coordinate pairings are retained.
.PP
A third vector is needed to indicate the abscissas (x\-coordinates) of the new points to be interpolated by the
spline. Like the x vector, the vector of abscissas must be monotonically increasing. All the abscissas must lie between
the first and last knots (x vector) forming the spline.
.PP
How the abscissas are picked is arbitrary. But if we are going to plot the spline, we will want to include the knots
too. Since both the quadratic and natural splines preserve the knots (an abscissa from the x vector will always produce
the corresponding ordinate from the y vector), we can simply make the new vector a superset of \fB\fCx\fR\&. It will contain the
same coordinates as \fB\fCx\fR, but also the abscissas of the new points we want interpolated. A simple way is to use the
vector's \fBpopulate\fP operation.
.PP
.RS
.nf
x populate sx 10
.fi
.RE
.PP
This creates a new vector \fB\fCsx\fR\&. It contains the abscissas of \fB\fCx\fR, but in addition \fB\fCsx\fR will have ten evenly distributed
values between each abscissa. You can interpolate any points you wish, simply by setting the vector values.
.PP
Finally, we generate the ordinates (the images of the spline) using the \fBspline\fP command. The ordinates are stored in
a fourth vector.
.PP
.RS
.nf
spline natural x y sx sy
.fi
.RE
.PP
This creates a new vector \fB\fCsy\fR\&. It will have the same length as \fB\fCsx\fR\&.  The vectors \fB\fCsx\fR and \fB\fCsy\fR represent the smoothed
curve which we can now plot.
.PP
.RS
.nf
graph .graph
\&.graph element create original \-x x \-y x \-color blue
\&.graph element create spline \-x sx \-y sy \-color red
table . .graph
.fi
.RE
.PP
The \fBnatural\fP operation employs a cubic interpolant when forming the spline. In terms of the draftmen's spline, a
\fInatural spline\fP requires the least amount of energy to bend the spline (strip of wood), while still passing through
each knot. In mathematical terms, the second derivatives of the first and last points are zero.
.PP
Alternatively, you can generate a spline using the \fBquadratic\fP operation. Quadratic interpolation produces a spline
which follows the line segments of the data points much more closely.
.PP
.RS
.nf
spline quadratic x y sx sy
.fi
.RE
.SH Operations
.RS
.IP \(bu 2
\fBspline natural\fP \fIx y sx sy\fP
.RE
.IP
Computes a cubic spline from the data points represented by the vectors \fIx\fP and \fIy\fP and interpolates new points using
vector \fIsx\fP as the x\-coordinates. The resulting y\-coordinates are written to a new vector \fIsy\fP\&. The vectors \fIx\fP and
\fIy\fP must be the same length and contain at least three components. The order of the components of \fIx\fP must be
monotonically increasing. \fISx\fP is the vector containing the x\-coordinates of the points to be interpolated. No
component of \fIsx\fP can be less than first component of \fIx\fP or greater than the last component.  The order of the
components of \fIsx\fP must be monotonically increasing.  \fISy\fP is the name of the vector where the calculated
y\-coordinates will be stored. If \fIsy\fP does not already exist, a new vector will be created.
.RS
.IP \(bu 2
\fBspline quadratic\fP \fIx y sx sy\fP
.RE
.IP
Computes a quadratic spline from the data points represented by the vectors \fIx\fP and \fIy\fP and interpolates new points
using vector \fIsx\fP as the x\-coordinates. The resulting y\-coordinates are written to a new vector \fIsy\fP\&. The vectors \fIx\fP
and \fIy\fP must be the same length and contain at least three components. The order of the components of \fIx\fP must be
monotonically increasing. \fISx\fP is the vector containing the x\-coordinates of the points to be interpolated. No
component of \fIsx\fP can be less than first component of \fIx\fP or greater than the last component.  The order of the
components of \fIsx\fP must be monotonically increasing.  \fISy\fP is the name of the vector where the calculated
y\-coordinates are stored. If \fIsy\fP does not already exist, a new vector will be created.
.SH References
.PP
Numerical Analysis by R. Burden, J. Faires and A. Reynolds. Prindle, Weber & Schmidt, 1981, pp. 112
.PP
Shape Preserving Quadratic Splines\[rs]
by D.F.Mcallister & J.A.Roulier\[rs]
Coded by S.L.Dodd & M.Roulier N.C.State University.
.PP
The original code for the quadratric spline can be found in TOMS #574.
